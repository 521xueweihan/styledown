#!/usr/bin/env node
var meow = require('meow')
var styledown = require('../index')
var read = require('read-input')
var fs = require('fs')
var path = require('path')

/*
 * CLI/Minimist
 */

var cli = require('meow')([
  'Usage:',
  '  $ styledown FILES...',
  '',
  'Output formats:',
  '      --json              parse into JSON data (default)',
  '      --yaml              parse into YAML data',
  '  -H, --html              render as HTML',
  '',
  'Parsing options:',
  '  -t, --transform LANG    transpiles examples of given LANG',
  '',
  'Rendering options:',
  '  -l, --layout FILE       uses FILE as an HTML layout',
  '  -o, --outdir DIR        render output HTML to DIR (implies --html)',
  '',
  'Other options:',
  '  -h, --help              show usage information',
  '  -v, --version           print version info and exit',
  '',
  'Examples:',
  '',
  '  styledown styles.md > styles.json         # parse to json',
  '  styledown styles.md --html > styles.html  # render to html',
  '  styledown *.md -o outdir                  # render to html (multiple)',
  '',
  "  styledown *.md -t jade    # transpiles 'example.jade' sections"
].join('\n'), {
  boolean: ['help', 'version', 'yaml', 'json', 'html'],
  string: ['format', 'transform', 'outdir', 'layout'],
  alias: {
    h: 'help',v: 'version',
    H: 'html', t: 'transform', o: 'outdir', l: 'layout'
  }
})

/*
 * Implied options
 */

if (cli.flags.outdir) cli.flags.html = true
if (typeof cli.flags.transform === 'string') {
  cli.flags.transform = [cli.flags.transform]
}

/*
 * Options to send to styledown.parse() and styledown.render()
 */

var opts = {
  parse: {
    transform: cli.flags.transform
  },
  render: {
    layout: cli.flags.layout && fs.readFileSync(cli.flags.layout, 'utf-8')
  }
}

/*
 * Perform
 */

read(cli.input)
.then(function (res) {
  res.files.forEach(function (file) {
    if (file.error) throw file.error
  })

  var output = styledown.parse(res.files, opts.parse)

  if (cli.flags.outdir) {
    renderToDir(output, cli.flags.outdir)
  } else if (cli.flags.html) {
    renderToStdout(output)
  } else if (cli.flags.yaml) {
    parseToYaml(output)
  } else {
    parseToJson(output)
  }
})

/*
 * Render to dir (--outdir dir)
 */

function renderToDir (output, dir) {
  require('mkdirp').sync(dir)
  Object.keys(output.files).forEach(function (fname) {
    fs.writeFileSync(
      path.join(dir, fname).replace(/\.md$/, '.html'),
      styledown.render(output, fname, opts.render), 'utf-8')
  })
}

/*
 * Render to stdout (--html)
 */

function renderToStdout (output) {
  Object.keys(output.files).forEach(function (fname) {
    process.stdout.write(styledown.render(output, fname, opts.render))
  })
}

/*
 * Parse to YAML (--yaml)
 */

function parseToYaml (output) {
  console.log(require('js-yaml').safeDump(output))
}

/*
 * Parse to JSON (default, --json)
 */

function parseToJson (output) {
  console.log(JSON.stringify(output, null, 2))
}
