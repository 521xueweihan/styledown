#!/usr/bin/env node
var Styledown = require('..'),
    read = require('read-input');

var args = require('minimist')(process.argv.slice(2), {
  boolean: ['inline', 'css', 'js', 'conf', 'quiet'],
  alias: { h: 'help', v: 'version', i: 'inline', o: 'output', q: 'quiet' }
});

if (args.help) {
  console.log([
      'Usage:',
      '    styledown [options] FILE',
      '    ... | styledown [options]',
      '',
      'Options:',
      '    -h, --help           print usage information',
      '    -v, --version        show version info and exit',
      '    -i, --inline         force extracts from inline CSS comments (for piping)',
      '    -o, --output FILE    write output a file',
      '',
      'Support files:',
      '    styledown --css  > styledown.css',
      '    styledown --js   > styledown.js',
      '    styledown --conf > config.md',
  ].join('\n'));
  process.exit();
}

if (args.version) {
  console.log(require('../package.json').version);
  process.exit();
}

if (args.js) {
  print(Styledown.defaults.js());
  process.exit();
}

if (args.css) {
  print(Styledown.defaults.css());
  process.exit();
}

if (args.conf) {
  print(Styledown.defaults.conf());
  process.exit();
}

read(args._, function (err, res) {
  var html;

  var ms = measure(function () {
    html = Styledown.parse(res.files, {
      inline: args.inline
    }) + "\n";
  });

  print(html, ms);
});

function print (html, ms) {
  if (args.output) {
    require('fs').writeFileSync(args.output, html);

    if (!args.quiet) {
      var tip = '' + args.output;
      if (ms) tip += " [" + ms + "ms]";
      process.stderr.write(tip + "\n");
    }
  } else {
    process.stdout.write(html);
  }
}

function measure (fn) {
  var d = new Date();
  fn();
  return new Date() - d;
}
